# -*- coding: utf-8 -*-
"""Movie Recommendation System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FBb8EeYFIvms74z8EGNSMKgOm4SomFPA

**Movie Recommendation**

GroupLens Research has collected and made available rating data sets from the MovieLens web site (http://movielens.org). The data sets were collected over various periods of time, depending on the size of the set.

**Types of recommendation system**
1. **Popularity Based:**
It keeps a track of view counts for each movie/video and then lists movies based on views in descending order.

2. **Content Based:**
This type of recommendation systems, takes in a movie that a user currently likes as input. Then it analyzes the contents of the movie to find out other movies which have similar content. Then it ranks similar movies according to their similarity scores and recommends the most relevant movies to the user.

3. **Collaborative filtering:**
In other words, the recommendations get filtered based on the collaboration between similar userâ€™s preferences.

In this project I'm are going to implement content based recommendation system.
"""

#importing libs
import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

"""**Loading Dataset**


* The movies.csv dataset contains three columns:

1.   **movieId**: the ID of the movie.
2.   **title:** movies title
3.  **genres:** movies genres

* The ratings.csv dataset contains four columns:

1. **userId:** the ID of the user who rated the movie.
2. **movieId:** the ID of the movie
3. **ratings:** ratings given by each user (from 0 to 5)
4. **Timstamp:** The time the movie was rated.












"""

movies = pd.read_csv('/movies.csv')
ratings = pd.read_csv('/ratings.csv')

"""**EDA : Exploratory Data Aanlysis**"""

#getting info on types of cols in movies dataframe
movies.info()

#getting info on types of cols in ratings dataframe
ratings.info()

movies.shape

ratings.shape

"""This indicates that the data consists of 105339 ratings applied over 10329 movies."""

#getting statistical info on movies dataframe
movies.describe()

#getting statistical info on ratings dataframe
ratings.describe()

"""From the above table we can conclue that



*   The average rating is 3.5 and minimum and maximum rating is 0.5 and 5 respectively.
*   There are 668 user who has given their ratings for 149532 movies.



"""

genres = []  # Initialize an empty list to store unique genres
for genre in movies.genres:  # Loop through each genre in the 'genres' column of the DataFrame
    x = genre.split('|')  # Split the genre string by the '|' character into a list of genres
    for i in x:  # Loop through each genre in the split list
        if i not in genres:  # Check if the genre is not already in the 'genres' list
            genres.append(str(i))  # If it's not, add it to the list
genres = str(genres)  # Convert the final list of genres to a string

movie_title=[]
for title in movies.title:
    movie_title.append(title[0:-7])
    #removing last 7 char. Eg: "The Matrix (1999)", the last 7 characters (" (1999)") are removed.
movie_title=str(movie_title)

"""**Data Visualization**"""

wordcloud_genre = WordCloud(
    width=1500,
    height=800,
    background_color='black',
    min_font_size=2,
    min_word_length=3
).generate(genres)

wordcloud_title = WordCloud(
    width=1500,
    height=800,
    background_color='cyan',
    min_font_size=2,
    min_word_length=3
).generate(movie_title)

plt.figure(figsize=(20,7))
plt.axis('off')
plt.title('WORDCLOUD for Movies Genre',fontsize=30)
plt.imshow(wordcloud_genre)

plt.figure(figsize=(20,7))
plt.axis('off')
plt.title('WORDCLOUD for Movies title',fontsize=30)
plt.imshow(wordcloud_title)

#left join (merge) operation on two DataFrames, ratings and movies based on common movieID
df = pd.merge(ratings, movies, how='left', on='movieId')
df.head()

#df1: Contains the sum of ratings for each movie, grouped by title.
df1=df.groupby(['title'])[['rating']].sum()
#high_rated: Contains the top 20 movies with the highest total ratings.
high_rated=df1.nlargest(20,'rating')
high_rated.head(10)

plt.figure(figsize=(18,6))
plt.title('Top 20 movies with highest rating',fontsize=30)
colors=['red','yellow','orange','green','magenta','cyan','blue','lightgreen','skyblue','purple']
plt.ylabel('ratings',fontsize=20)
plt.xticks(fontsize=15,rotation=90)
plt.xlabel('movies title',fontsize=20)
plt.yticks(fontsize=15)
plt.bar(high_rated.index,high_rated['rating'],linewidth=3,edgecolor='black',color=colors)

df2=df.groupby('title')[['rating']].count()
rating_count_20=df2.nlargest(20,'rating')
rating_count_20.head()

plt.figure(figsize=(18,6))
plt.title('Top 20 movies with highest number of ratings',fontsize=20)
plt.xticks(fontsize=15,rotation=90)
plt.yticks(fontsize=15)
plt.xlabel('movies title',fontsize=20)
plt.ylabel('ratings',fontsize=20)

plt.bar(rating_count_20.index,rating_count_20.rating,color='cyan')

#TfidfVectorizer: Converts the genres from the movies DataFrame into a numerical format
cv=TfidfVectorizer()
#tfidf_matrix: A sparse matrix representing the TF-IDF scores of genres for each movie
tfidf_matrix=cv.fit_transform(movies['genres'])

movie_user = df.pivot_table(index='userId',columns='title',values='rating')
movie_user.head()

"""Suppose a user wants to watch a movie similar to Toy Story (1995) then we can recommend the user by calculating the cosine similarity between Toy Story and other movies."""

#cosine similarity measures how much two things (like documents or pieces of text) are aligned with each other
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

#function takes a movie title, finds the most similar movies to it based on cosine similarity, and returns the titles of those similar movies.
indices=pd.Series(movies.index,index=movies['title'])
titles=movies['title']
def recommendations(title):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:21]
    movie_indices = [i[0] for i in sim_scores]
    return titles.iloc[movie_indices]

recommendations('Toy Story (1995)')

recommendations('Lord of the Rings, The (1978)')